<?xml version="1.0" encoding="utf-8" ?>
<!--
CmdTool.config

You can run this generator by assigning a project item the custom generator of "CmdTool" in the Properties pane.
Once you've done this there are three ways to invoke the code-generation:

1. Simply edit the original file and save it, Visual Studio will then run the generator
2. Right-click the item in Visual studio and select "Run Custom Tool"
3. From the command-line run the following: CmdTool.exe build <Project file.csproj>

Once code generation begins, CmdTool will start at the source file's directory and search up the directory tree.
foreach file named "CmdTool.config" it finds it will load the configuration below and merge it into the results.
Finally CmdTool will load it's own CmdTool.exe.config and, if the section CmdTool is defined, merge it as well.

Once all configurations are merged it will begin attempting to match the original source file against all the 
patterns defined in the filespec attribute of the root match tags.  This set of match tags is then walked and
will be excluded if the following conditions are met: a) there are one or more applies-to tags defined, and b) 
the input source is not contained in any of the directories defined by one of the applies-to tags. These folders
are evaluated as relative to the configuration file they are defined within.

This final subset defines the collection of generators that will be applied to the input source file.  
-->
<CmdTool xsi:noNamespaceSchemaLocation="http://csharptest.net/downloads/schema/CmdTool.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <!-- The match is evaluated against the input file, use '*' or '?' for wild-cards -->
  <match filespec="*.test-js">
    <!-- applies if in one of the following directories relative to this configuration file -->
    <applies-to folder="./"/>
    <!-- 
    A generator, one or more can be defined.  You may set debug=true for more verbose output including
    the modified script/file and arguments.  This will only be displayed on the console if you do not
    provide the '/quiet' option.  Use '/verbose' to produce the same effect on the command-line.
    -->
    <generator debug="false">
      <!-- 
      The type of executable can be either a script or an execute tag.  For either, the contents may
      include variables via the nmake macro expansion syntax '$(xxx)' see help-vars for more info.
      The script may be inline as shown here, or may be included from an external source via the 
      'src=' attribute.  If the src attribute is defined the contents of the script block will not
      be used.  The path provided in the src attribute is again relative to this configuration file.
      Please be aware that scripts included via the attribute will not have variables replaced in
      their content.
      
      Common input variables:
      $(Namespace) - The namespace that should be used by the tool
      $(ClassName) - The classname derived from the file name as a valid identifier
      $(InputPath) - The fully qualified input file name to generate from
      $(InputDir)  - The qualified directory name for the input file
      $(InputName) - The file name and extension of the input file
      $(ConfigDir) - The directory where the configuration was loaded, also the working directory
      -->
      <script type="JScript">
        try {
        WScript.StdOut.WriteLine("// Generated from input:  " + WScript.Arguments(0));
        WScript.StdOut.WriteLine("// You home directory:  " + WScript.Arguments(1));
        WScript.StdOut.WriteLine("// Solution directory:  " + WScript.Arguments(2));
        WScript.StdOut.Write(WScript.StdIn.ReadAll());
        }
        catch(e) {
        WScript.StdErr.Write(e.message);
        WScript.Quit(1);
        }
      </script>
      <!-- Provides one or more additional command-line arguments, this specifies the input file -->
      <arg value="$(inputPath)"/>
      <!-- Variables can be defined either in the project, or in the environment -->
      <arg value="$(UserProfile)"/>
      <!-- Some variables we make a 'best guess' to reconstruct -->
      <arg value="$(SolutionDir)"/>
      <!-- Redirect the spawned process' std::in to read the input source file's content -->
      <std-input redirect="true"/>
      <!-- Optional, redirect std::out to a file with this extension -->
      <std-output extension=".JScript.cs"/>
      <!-- One or more files that the above program might generate -->
      <output extension=".missing.cs"/>
    </generator>
  </match>

  <match filespec="*.test-cmd">
    <generator debug="false">
      <!-- Demonstrates generating multiple files and not using std::out -->
      <script type="Cmd">@echo off
        Echo // generated from source: %~1 > %2
        Type %1 >> %2
        Echo // generated from source: %~1 > %3
        Type %1 >> %3
      </script>
      <arg value="$(inputpath)"/>
      <arg value="$(inputpath:.test-cmd=.test1.cs)"/>
      <arg value="$(inputpath:.test-cmd=.test2.cs)"/>
      <output extension=".test1.cs"/>
      <output extension=".test2.cs"/>
    </generator>
  </match>

  <match filespec="*.test-cs">
    <generator debug="false">
      <!-- 
      Executables may use environment variables, or be found in the local %PATH% or current directory.
      Additionally, as with other paths, they can be a relative path to this configuration file.
      -->
      <script type="CSharp">
        <![CDATA[
//#import System.Data.dll
//#import System.Xml.dll
using System;
using System.IO;
using System.Data;
using System.Xml;
class Program
{
  static void Main(string[] args)
  {
    Console.WriteLine("// Generated by C# from " + args[0]);
    Console.WriteLine(File.ReadAllText(args[0]));
    Console.WriteLine("// Xml Assembly: {0}", typeof(System.Xml.Serialization.XmlSerializer).Assembly);
  }
}
      ]]></script>
      <arg value="$(inputpath)"/>
      <std-output extension=".Designer.cs"/>
    </generator>
  </match>
  
  <match filespec="*.test-exe">
    <generator debug="false" input-encoding="ascii" output-encoding="utf-8">
      <!-- 
      Executables may use environment variables, or be found in the local %PATH% or current directory.
      Additionally, as with other paths, they can be a relative path to this configuration file.
      -->
      <execute exe="%SystemRoot%\system32\Cmd.exe"/>
      <arg value="/c"/>
      <arg value="@Echo // Generated from input: $(inputPath) &amp;&amp; type $(InputPath)"/>
      <std-output extension=".Exec.cs"/>
    </generator>
  </match>
  
  <match filespec="*.help">
    <generator debug="false">
      <!-- 
      Executables may use environment variables, or be found in the local %PATH% or current directory.
      Additionally, as with other paths, they can be a relative path to this configuration file.
      -->
      <execute exe="%SystemRoot%\system32\Cmd.exe"/>
      <arg value="/c"/>
      <arg value="ECHO if we use a $(missing-variable) then help will display"/>
      <std-output extension=".Help.txt"/>
    </generator>
  </match>
</CmdTool>